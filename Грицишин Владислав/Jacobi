import numpy as np


def jacobi(A, b, x0, tol, max_iter):
    n = len(A)
    if len(A) != len(b) or len(A[0]) != len(x0):
        raise ValueError("Incompatible dimensions between matrix A, vector b, and initial guess x0.")

    x = x0.copy()
    iteration = 0
    while iteration < max_iter:
        x_new = np.zeros(n)
        for i in range(n):
            s = np.dot(A[i, :i], x[:i]) + np.dot(A[i, i + 1:], x[i + 1:])
            x_new[i] = (b[i] - s) / A[i, i]
        if np.linalg.norm(x_new - x) < tol:
            return x_new
        x = x_new
        iteration += 1
        rounded_x = np.round(x, 3)
        print(f"Iteration {iteration}: {rounded_x}")

    raise ValueError("Jacobi method did not converge within the maximum number of iterations.")


A = np.array([[4, -1, 0, 0], [-1, 4, -1, 0], [0, -1, 4, -1], [0, 0, -1, 4]])
b = np.array([2, 4, 6, 8])
x0 = np.array([0, 0, 0, 0])

tolerance = 1e-3
max_iterations = 100

solution = jacobi(A, b, x0, tol=tolerance, max_iter=max_iterations)
rounded_solution = np.round(solution, 3)
print("Solution:", rounded_solution)
